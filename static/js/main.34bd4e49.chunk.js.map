{"version":3,"sources":["components/button.js","components/drumMachine.js","App.js","serviceWorker.js","index.js"],"names":["buttonStyle","width","height","backgroundColor","border","display","alignItems","justifyContent","fontSize","boxShadow","Button","props","useEffect","document","addEventListener","handleKeydown","window","focus","text","audio","sound","useRef","e","keyCode","charCodeAt","current","play","style","onClick","src","id","className","ref","data","letter","DrumMachine","map","key","ix","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0PA8BaA,G,gBAAc,CACzBC,MAAO,OACPC,OAAQ,OACRC,gBAAiB,UACjBC,OAAQ,oBACRC,QAAS,OACTC,WAAY,SACZC,eAAgB,SAChBC,SAAU,OACVC,UAAW,mCAGEC,EAvCA,SAACC,GAEdC,qBAAU,WACRC,SAASC,iBAAiB,UAAWC,GACrCC,OAAOC,UACN,IALqB,IAOhBC,EAAgBP,EAAhBO,KAAMC,EAAUR,EAAVQ,MACRC,EAAQC,iBAAO,MAEfN,EAAgB,SAACO,GAClBA,EAAEC,UAAYL,EAAKM,cACpBJ,EAAMK,QAAQC,QAOlB,OACE,yBAAKC,MAAO3B,EAAa4B,QAJP,WAClBR,EAAMK,QAAQC,SAIXR,EACD,2BAAOW,IAAKV,EAAOW,GAAIZ,EAAMa,UAAU,OAAOC,IAAKZ,MCtBnDa,EAAO,CACX,CAAEH,GAAI,QAASI,OAAQ,IAAKL,IAAK,qDACjC,CAAEC,GAAI,SAAUI,OAAQ,IAAKL,IAAK,yDAClC,CAAEC,GAAI,QAASI,OAAQ,IAAKL,IAAK,mDACjC,CAAEC,GAAI,UAAWI,OAAQ,IAAKL,IAAK,0DACnC,CAAEC,GAAI,SAAUI,OAAQ,IAAKL,IAAK,iDAClC,CAAEC,GAAI,UAAWI,OAAQ,IAAKL,IAAK,2DACnC,CAAEC,GAAI,WAAYI,OAAQ,IAAKL,IAAK,iDACpC,CAAEC,GAAI,WAAYI,OAAQ,IAAKL,IAAK,yDACpC,CAAEC,GAAI,QAASI,OAAQ,IAAKL,IAAK,iEAkBpBM,EAZK,WAClB,OACE,yBAAKJ,UAAU,gBACb,yBAAKA,UAAU,WACZE,EAAKG,KAAI,SAACC,EAAIC,GAAL,OACR,kBAAC,EAAD,CAAQpB,KAAMmB,EAAIH,OAAQf,MAAOkB,EAAIR,IAAKQ,IAAKC,UCV1CC,MATf,WACE,OACE,yBAAKR,UAAU,OACb,oEACA,kBAAC,EAAD,QCIcS,QACW,cAA7BxB,OAAOyB,SAASC,UAEe,UAA7B1B,OAAOyB,SAASC,UAEhB1B,OAAOyB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFjC,SAASkC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.34bd4e49.chunk.js","sourcesContent":["import React, { useRef, useEffect } from 'react'\nimport { Sampler } from 'tone'\n\nconst Button = (props) => {\n\n  useEffect(() => {\n    document.addEventListener('keydown', handleKeydown)\n    window.focus()\n  }, [])\n\n  const { text, audio } = props;\n  const sound = useRef(null);\n\n  const handleKeydown = (e) => {\n    if(e.keyCode === text.charCodeAt()) {\n      sound.current.play();\n    }\n  }\n\n  const handleClick = () => {\n    sound.current.play();\n  }\n  return (\n    <div style={buttonStyle} onClick={handleClick}>\n      {text}\n      <audio src={audio} id={text} className='clip' ref={sound}/>\n    </div>\n  )\n}\n\nexport const buttonStyle = {\n  width: '90px',\n  height: '90px',\n  backgroundColor: '#485460',\n  border: '2px solid #1e272e',\n  display: 'flex',\n  alignItems: 'center',\n  justifyContent: 'center',\n  fontSize: '36px',\n  boxShadow: '5px 5px 5px rgba(0, 0, 0, 0.4)'\n}\n\nexport default Button\n","import React from 'react'\nimport Button from './button';\n\nconst data = [\n  { id: 'snare', letter: 'Q', src: 'https://www.myinstants.com/media/sounds/snare.mp3' },\n  { id: 'bass 1', letter: 'W', src: 'https://www.myinstants.com/media/sounds/bass-drum.mp3' },\n  { id: 'bongo', letter: 'E', src: 'http://tipiwiki.free.fr/snd/Percussion(4e)2.wav' },\n  { id: 'tom tom', letter: 'A', src: 'http://www.denhaku.com/r_box/sr16/sr16tom/loelectm.wav' },\n  { id: 'bass 3', letter: 'S', src: 'http://billor.chsh.chc.edu.tw/sound/bass4.wav' },\n  { id: 'shotgun', letter: 'D', src: 'http://david.guerrero.free.fr/Effects/ShotgunReload.wav' },\n  { id: 'high hat', letter: 'Z', src: 'http://www.denhaku.com/r_box/tr707/closed.wav' },\n  { id: 'drum hit', letter: 'X', src: 'http://www.masterbits.de/sc_docu/sounds1/1TM00013.MP3' },\n  { id: 'laser', letter: 'C', src: 'http://www.sa-matra.net/sounds/starcontrol/Umgah-Backzip.wav'  },\n]\n\nconst easterEgg = {\n  id: 'surprise', src: \"https://www.myinstants.com/instant/bongo-cat-lets-go-26369/embed/\"\n}\nconst DrumMachine = () => {\n  return (\n    <div className='drum-machine'>\n      <div className='display'> \n        {data.map((key,ix) => (\n          <Button text={key.letter} audio={key.src} key={ix}/>\n        ))}\n      </div>\n    </div>\n  )\n}\n\nexport default DrumMachine\n","import React from 'react';\nimport './App.css';\nimport DrumMachine from './components/drumMachine';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h2>Welcome to the awesome drum machine!</h2>\n      <DrumMachine/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}